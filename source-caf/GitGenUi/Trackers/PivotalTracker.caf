import &ArtStandardLib, &ArtClassSystem, &ArtRestClient, &Config

class PivotalTracker extends BaseClass
  @classGetter
    accountConfig: -> userConfig.accounts?[@name]

  @classGetter
    token: -> @accountConfig?.token
    configured: -> present @token
    commonRestOptions: ->
      normalizedHeaders: X-TrackerToken: @token

  #####################################
    CONSTANTS
  #####################################
  stateOrder =
    rejected:       0
    started:        1
    unstarted:      2
    unscheduled:    3
    finished:       4
    delivered:      5
    unknown:        5

  @baseUrl: :https://www.pivotaltracker.com/services/v5

  @storyStates: :started :rejected :planned :unstarted :unscheduled :finished :delivered

  @settableStoryStates: :unstarted :started :finished :delivered

  @requireProjectId: (projectId) -> throw new Error "projectId required" unless present projectId

  @getProjectUrl: (projectId) ->
    @requireProjectId projectId
    "" #{@projectsUrl}/#{projectId}

  #####################################
    GET ACCOUNT DETAILS
  #####################################
  @classGetter
    projectsUrl:  -> "" #{@baseUrl}/projects
    projects:     -> getJson @projectsUrl, @commonRestOptions

    myAccount: ->
      getJson "#{@baseUrl}/me?date_format=millis" @commonRestOptions
      .then @_normalizeAccount

  #####################################
    GET PROJECT DETAILS
  #####################################

  @getStories: (projectId, options) =>
    options extract? states
    states ?= @storyStates
    getJson "#{@getProjectUrl projectId}/stories?limit=500&date_format=millis&filter=state:#{states.join ','}" @commonRestOptions
    .then (stories) -> stories.map @_normalizeStory
    .then (stories) -> stories.sort (a, b) ->
        aStatus = stateOrder[a.state] ? stateOrder.unknown
        bStatus = stateOrder[b.state] ? stateOrder.unknown
        if aStatus != bStatus then aStatus - bStatus
        else b.updatedAt - a.updatedAt

  @getProject: (projectId) =>
    getJson (@getProjectUrl projectId), @commonRestOptions
    .then @_normalizeResponse

  @getMembers: (projectId) =>
    getJson "#{@getProjectUrl projectId}/memberships" @commonRestOptions
    .then (memberships) ->
      array {person} in memberships
        {id, name, email} = person

  @openInBrowser: (projectId) ->
    @requireProjectId projectId
    &open "" https://www.pivotaltracker.com/n/projects/#{projectId}

  @getStoryBrowserUrl: (projectId, storyId) ->
    "" https://www.pivotaltracker.com/story/show/#{storyId}

  @getStoryUrl: (projectId, storyId) ->
    @getProjectUrl projectId
    + "" /stories/#{storyId}

  @authenticate: ({username, password}) ->
    getJson :https://www.pivotaltracker.com/services/v5/me merge
      headers:
        Authorization: "" Basic #{} &btoa "#{username}:#{password}"
    .then @_normalizeAccount

  #####################################
    TOOLS
  #####################################

  @storyIsStartable:  (story) -> story.state in :unstarted :rejected :unscheduled
  @storyIsFinishable: (story) -> story.state in [] :unstarted :rejected :unscheduled :started

  #####################################
    STORIES
  #####################################
  @getStory: (projectId, storyId) =>
    getJson @getStoryUrl projectId, storyId
    .then @_normalizeStory

  @createStory: (projectId, story) =>
    postJson
      @getStoryUrl projectId
      @_denormalizeStory story
      @commonRestOptions

    .then @_normalizeStory
    .tapCatch (error) -> log createStory: {} error

  @updateStory: (projectId, storyOrId, updates) =>
    Promise.then ->
      if present storyOrId?.id then storyOrId
      else @getStory projectId, storyOrId

    .then ({id, storyType, estimate}) ->
      if storyType != :chore && !estimate? && !updates.estimate?
        updates = merge updates, estimate: 1

      putJson
        @getStoryUrl projectId, id
        @_denormalizeStory updates
        @commonRestOptions

    .then @_normalizeStory
    .tapCatch (error) -> log updateStory: {} error

  @createComment: (projectId, storyId, text) ->
    postJson
      "" #{@getStoryUrl projectId, storyId}/comments
      {} text
      @commonRestOptions

  #####################################
    PRIVATE
  #####################################
  @_normalizeStory: (story) =>
    @_normalizeResponse object v, k in story with-key if k == :current_state then :state else k

  @_denormalizeStory: (story) =>
    @_snakeCaseKeys object v, k in story with-key if k == :state then :current_state else k


  @_normalizeAccount: (account) ->
    merge
      object v, k from account with-key
        if k == :api_token
          :token
        else lowerCamelCase k
      tracker: :PivotalTracker

  @_snakeCaseKeys: (data) ->
    object v, k in data with-key snakeCase k

  @_normalizeResponse: (data) ->
    object v, k in data with-key lowerCamelCase k
      if v.match? /^\d\d\d\d-\d\d-\d\d[A-Z]\d\d:\d\d:\d\d[A-Z]/
        Date.parse v # e.g. 2020-03-02T08:00:00Z
      else v
