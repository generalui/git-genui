import &StandardImport

class ConfigShared extends BaseClass

  @initSingleton: ->
    @getConfigFilePathPromise()
    .then (configFilePath) -> @singleton.init configFilePath
    .then -> @singleton.readyPromise
    .then -> @singleton

  init: (@configFilePath) -> Promise.resolve()

  @property :config

  @getter
    :configFilePath
    configBasename: -> @class.configBasename
    configPath: -> &path.dirname @configFilePath
    state: -> @config
    homeDirRelativeConfigFilePath: -> @configFilePath.replace &os.homedir(), "~"
    readyPromise: -> @_readyPromise
    inspectedObjects: -> toInspectedObjects @config

  @configFields: (fields...) ->
    each field in compactFlatten fields
      switch
      when field is String
        @_addConfigField field

      when field is Object
        each _default, key in field
          @_addConfigField key, _default

      else
        throw new Error "unsupported configFields param type: #{formattedInspect {} field} (expeting String or Object)"

  @_addConfigField: (field, _default) ->
    @setter [field]: (v) ~> @setConfigProperty field, v
    @getter [field]: ~> @config[field] ? _default
    @prototype[lowerCamelCase "merge #{field} with"] = (args...) ~> @setConfigProperty field, merge @[field], args...
    @prototype[lowerCamelCase "deep merge #{field} with"] = (args...) ~> @setConfigProperty field, deepMerge @[field], args...

  @setter
    configFilePath: (cfp) ->
      @_configFilePath = cfp
      @_load()

  setConfigProperty: (key, value) ->
    @_config = merge @_config
    @_config[key] = value
    @_save()

  deepMergeInto: (config) ->
    @_config = deepMerge @_config, config
    @_save()

  #####################################
    PRIVATE
  #####################################
  _save: ->
    &fsExtra.writeFile
      filePath = @configFilePath
      consistentJsonStringify @config, "  "
    .then -> @config

  _load: ->
    @_readyPromise =
      Promise.then -> &fsExtra.exists @configFilePath
      .then (exists) ->
        if exists
          &fsExtra.readFile @configFilePath
          .then (data) -> JSON.parse data.toString()

        else {}

      .then (config) -> @setConfig config
