import &StandardImport, {} &colors

getResolvedFilePath = (filePath) ->
  &path.join &ProjectConfig.projectConfig.configPath, filePath

->
  &Git.rawStatus
  .then ({files}) ->
    files = array file in files when file.index != :renamed

    &PromptFor.selectList {}
      multiselect: true
      prompt: "" Use <space> and <arrow keys> to stage and unstage files. Type to search. <enter> when done.
      items = array file in files.sort (a, b) -> a.path.localeCompare b.path
        {}
          file
          selected: !file.workingDir
          value:    "" #{pad '(#{file.workingDir || :staged})', 15} #{} file.path

    .then (selectedItems) ->
      selectedFilesByFile = object item from selectedItems with-key item.file.path
      # log {} selectedFilesByFile
      each {file, selected} in items
        if !!selected != !!selectedFilesByFile[file.path]
          &Git[action = if selected then :unstage else :stage]
            getResolvedFilePath file.path
          log
            colors.blue action + ": "
            + colors.green file.path
