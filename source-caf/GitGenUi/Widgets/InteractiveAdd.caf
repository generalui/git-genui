import &StandardImport, &Config, {} &Style

getResolvedFilePath = (filePath) ->
  &path.join projectConfig.configPath, filePath

(options) ->
  &Git.rawStatus
  .then ({files}) ->
    files = array file in files when file.index != :renamed
    log {} files if options?.verbose

    &PromptFor.selectList {}
      multiselect: true
      tip:    "" <arrows> move cursor, <a/b/c..> filter, <space> toggle, <ctrl-a/n/i> select all/none/invert, <enter> finish
      prompt: "" Staged files
      items = array file in files.sort (a, b) ->
          if a.workingDir != b.workingDir
            (a.workingDir ? '').localeCompare b.workingDir ? ''
          else
            a.path.localeCompare b.path
        {}
          file
          selected: !file.workingDir
          value:    "" #{pad '(#{file.workingDir || :staged})', 15} #{} file.path

    .then (selectedItems) ->
      selectedFilesByFile = object item from selectedItems with-key item.file.path
      # log {} selectedFilesByFile
      serializer = new Promise.Serializer
      each {file, selected} in items
        if !!selected != !!selectedFilesByFile[file.path]
          serializer.then ->
            &Git[action = if selected then :unstage else :stage]
              getResolvedFilePath file.path
            .then ->
              log
                Style.blue action + ": "
                + Style.green file.path

      serializer