import &StandardImport, {} &ignoreRejections

commitParser = new &CommitParser

{}
  parseCommitMessage: (message) ->
    # [_, type, storyId, storyState, message, body, trailers...] = message.match ///
    #   ^   (?: ([^\s:]+) :)? # type

    #   \ * (?:\[#(\w+)\])?   # storyId

    #   \ * (?:\((\w+)\))?    # storyState

    #   \ * ([^\n]*)          # message

    #   \ * (?:
    #     \n\n
    #     (
    #       (?!BREAKING\ CHANGE:)
    #       (?!\w+:)
    #       (?:[^\n]+\n?\n?)+
    #     )
    #   )? # body

    #   \ * ((?:
    #     \n+
    #     (?:BREAKING\ CHANGE|[-\w_]+):
    #     \s+[^\n]+
    #   )*)

    {subject, type, scope, trackerState, trackerId, body, semanticVersion, footer} = commitParser.parse message
    merge {}
      type:
        if semanticVersion?
          if type? then "#{semanticVersion}/#{type}"
          else semanticVersion
        else type

      scope
      message:      subject
      storyState:   trackerState
      storyId:      trackerId
      body
      coauthors:    footer?[:co-authored-by]

  getCommitMessage: ({type, story, storyId, message, coauthors, storyState, breakingChange, body}) ->
    compactFlattenAll
      type + ": " if type

      if storyId ?= story?.id
        storyState = if present storyState then "#{storyState} "
        else ''
        "[#{storyState}##{storyId}] "

      if present message
        message

      if body
        "" \n\n#{body.replace /\n\n\n+/g, "\n\n"}

      if breakingChange
        "" \n\nBREAKING CHANGE: #{} breakingChange

      if coauthors?.length > 0
        "\n\n\n" +
          array coauthor in coauthors
            "" Co-authored-by: #{coauthor}
          .join "\n"
    .join ''
    .trim()

  getCommitComment: (state) ->
    state extract generatedCommitMessage, storyState, status, commit, remote

    """
      story #{storyState || :progressed} with commit: `#{commit}`, branch: `#{status?.current ? :unknown}`, remote: `#{remote?.refs.fetch ? :none}`, message:
      > #{generatedCommitMessage}
      (auto-comment by git-genui v#{&package.version})

  extractSavableState = (state) -> {message, type, coauthors, story, breakingChange, body, trailers} = state

  saveState: (state) ->
    if state
      userConfig.saveCommitOptionsForProject extractSavableState state

    state

  getInitialCommitState: (options = {}) ->
    Promise.deepAll merge
      userConfig.commitOptionsForProject
      {}
        &Git.status
        stories:    tracker.configured && ignoreRejections -> tracker.stories
        members:    tracker.configured && ignoreRejections -> tracker.members
        myAccount:  tracker.configured && ignoreRejections -> tracker.myAccount
        project:    tracker.configured && ignoreRejections -> tracker.project
        remote:     &Git.aRemote
        options
    .tap ({status}) ->
      unless options.quiet
        &Git.printStatus {} status
    .then (state) ->
      unless projectConfig.conventionalCommit
        objectWithout state, :breakingChange
      else state