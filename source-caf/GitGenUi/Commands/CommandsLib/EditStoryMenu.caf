import &StandardImport

(state, options) ->
  state extract story, project, members
  &PromptFor.menu
    story
    merge
      options
      preprocessState: (story) ->
        log.unquoted object v, k in story when k.match /At$/
          formatDate v
        story

      items: (story) -> []
        {}
          action: (story) ->
            &EditStoryName merge state, {} story
            .then (name) ->
              if name != story.name
                &Tracker.tracker.updateStory story.id, {} name

              else story

          label: :name
          value: story.name

        {}
          action: (story) ->
            &SelectStoryState merge state, {} story
            .then (storyState) ->
              if storyState != story.state
                &Tracker.tracker.updateStory story.id, state: storyState, estimate: story.estimate ? 1

              else story

          label: :state
          value: story.state

        {}
          action: (story) ->
            &SelectStoryEstimate merge state, {} story
            .then (estimate) ->
              if estimate != story.estimate
                &Tracker.tracker.updateStory story.id, {} estimate

              else story

          label: :estimate
          value: story.estimate ? :-

        {}
          action: (story) ->
            &SelectMembers
              merge state, {} story
              selectedMemberIds: story.ownerIds
              prompt: "" Select owners:
            .then (ownerIds) ->
              if neq ownerIds.sort(), story.ownerIds.sort()
                &Tracker.tracker.updateStory story.id, {} ownerIds

              else story

          label: :owners
          value:
            if story.ownerIds.length > 0
              array id in story.ownerIds
                find member in members when member.id == id
                ?.name

              .join ', '
            else "" (none)
