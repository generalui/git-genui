import &StandardImport

conditionalUpdate = (story, updates) ->
  if !story.newStory && find v, k in updates when neq story[k], v
    &Tracker.tracker.updateStory story.id, updates

  else Promise.resolve merge story, updates

(state, options) ->
  state extract story, project, members
  if story extract ownerIds extract? length > 0
    story = merge story, ownerIds: ownerIds.sort()

  log EditStoryMenu: story

  &PromptFor.menu
    story
    merge
      options
      preprocessState: (story) ->
        log.unquoted object v, k in story when k.match /At$/
          formatDate v
        story

      items: (story) -> []
        {}
          action: (story) ->
            &EditStoryName merge state, {} story
            .then (name) -> conditionalUpdate story, {} name

          label: :name
          value: story.name

        {}
          action: (story) ->
            &SelectStoryState merge state, {} story
            .then (storyState) -> conditionalUpdate story, state: storyState, estimate: story.estimate ? 1

          label: :state
          value: story.state

        {}
          action: (story) ->
            &SelectStoryEstimate merge state, {} story
            .then (estimate) -> conditionalUpdate story, {} estimate

          label: :estimate
          value: story.estimate ? :-

        {}
          action: (story) ->
            &SelectMembers
              merge state, {} story
              selectedMemberIds: story.ownerIds ? []
              prompt: "" Select owners:

            .then (ownerIds) -> ownerIds.sort()
            .then (ownerIds) -> conditionalUpdate story, {} ownerIds

          label: :owners
          value:
            if story.ownerIds?.length > 0
              array id in story.ownerIds
                find member in members when member.id == id
                ?.name

              .join ', '
            else "" (none)

        if story.newStory && present story.name
          action: (story) ->
            &Tracker.tracker.createStory objectWithout story, :newStory
            .then (story) -> merge story, newStory: true # signals not to immeidately edit it after we created it
          value: "" save and exit
          shortcut: :9
          exit: true
