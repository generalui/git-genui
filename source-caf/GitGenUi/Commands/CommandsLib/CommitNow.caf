import &StandardImport, &CommandsLib, &UserConfig, &Git

(state) ->
  if state.pretend
    Promise.resolve {}
      branch: state.status.current
      commit: :pretending
      summary: changes: 123 insertions: 456 deletions: 789
  else
    &Git.commit state

  .then (commitResult) ->
    applyActions
      merge state, commitResult
      [] :AddStoryComment # state extract postCommitActions
      &PostCommitActions

  .then ({actionsApplied, result:{branch, commit, summary}}) ->
    {staged} = state.status

    if state.options?.verbose
      log commit-success: {}
        summary: merge {files: array {path} from staged with path}, object v in summary with v | 0
        message: getGitCommitMessage state
        actionsApplied
        branch
        commit

    else
      log {} commit

    if state.story?.id
      log "" story: #{} &colors.green tracker.getStoryBrowserUrl state.story?.id

    null

  # .tap -> saveState objectWithout state, :message
