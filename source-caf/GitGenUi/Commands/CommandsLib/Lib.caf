import &StandardImport, &UserConfig

{}

  ##
    IN: statePropName, options, promptFunctionunction
    IN: statePropName, promptFunctionunction
  updateStateWithPrompt = (statePropName, a, b) ->
    promptFunction = if b?
      options = a
      b
    else a

    (state) ->
      Promise.then -> promptFunction state, options
      .then (value) ->
        if value == undefined then state[statePropName]
        else value
      .then (value) -> merge state, [statePropName]: value

  menuApp = (state, menuF) ->
    menuF state
    .then ({action}) -> if action?
      Promise.then -> action state
      .then (newState) -> menuApp newState ? state, menuF

  saveState = (state) ->
    userConfig.saveCommitOptionsForProject {message, type, coauthors, story} = state if state
    state

  validateStory = (state) ->
    state extract story, storyId, stories
    if storyId ?= story?.id
      unless story = find story in stories when story.id == storyId
        log.warn merge {}
          message: "" Invalid story or storyId
          story
          storyId

      state.story = story

    state

  getMyAccountOrNothing = ->
    Promise.then ->
      userConfig.accounts?[tracker.name]?.token
      && tracker.myAccount
    .catch ->

  getProjectOrNothing = ->
    Promise.then -> tracker.project
    .catch ->

  ensureTrackerConfigured = ->
    getProjectOrNothing()
    .then (project) -> &ConfigureMenu exitPrompt: :continue prompt: "Please select a project." unless project

  ensureTrackerTokenValid = ->
    getMyAccountOrNothing()
    .then (myAccount) -> &ConfigureMenu exitPrompt: :continue prompt: "Please configure your account." unless myAccount

  validateType = (state) ->
    unless !present(state.type) || /^(patch|major|minor)\/\w+$/.test state.type
      log.warn "" Commit type should be of the form: [major, minor or patch]/short-word (you provided: #{state.type})
      merge state, type: null
    else state
