import &StandardImport, &CommandsLib, &Git

##
  IN: state:
    status:     git status
    stories:    tracker stories
    members:    tracker members
    myAccount:  current user's tracker account

configure = (state) ->
  ConfigureMenu exitPrompt: :back
  .then -> Promise.deepAll {}
    stories:    ignoreRejections -> tracker.stories
    members:    ignoreRejections -> tracker.members
    myAccount:  ignoreRejections -> tracker.myAccount

  .then (updates) -> merge state, updates

statusColors =
  staged:     :green
  unstaged:   :red
  untracked:  :red

description:
  """
    Commit is the main command for git-genui. The primary goal is to generate a well-formatted git-commit message. Commit will prompt for configuration of needed, as well as giving an opportunity to stage or unstage files for the commit. Alternatively, you can stage files for your commit before calling git-genui-commit.

    All commandline options are optional. The are provided to streamling the commit process if needed.

options:
  message:    :message      "" entier your git-commit message on the command-line
  coauthors:  :authors      "" one more more coauthor emails (separated by spaces)
  type:       :type         "" Commit type string. Should be of the form: [major, minor or patch]/short-word
  story-id:   :id           "" Input the tracker story id directly on the command-line. It will be validated against existing stories.

run: (options) ->
  Promise.then -> &git.remotes
  .catch ({message})->
    log.warn "" Must be run inside a git repository:\n  #{message}
    process.exit 1
  .then -> getInitialCommitState options
  .then validateStory
  .then validateType
  .tap ({status}) ->
    if status.staged.length + status.unstaged.length + status.untracked.length == 0
      log.warn "" No local changes to commit.
      process.exit 1

  .then fillInMissingState
  .then saveState
  .then (state) ->
    &PromptFor.menu
      state

      preprocessState: (state) ->
        if present state.message
          log "" Commit message preview:
          log "  " +
            &colors.bold &colors.brightGreen getCommitMessage state
            .replace /\n/g, "\n  "
          log ''

        state

      items: (state) ->
        state extract myAccount, message, story, members, statusSummary, status, type, coauthors, breakingChange, body

        compactFlatten []
          action: EditCommitMessage,  label: "Edit message"             value: message
          if myAccount && projectConfig.tracker
            action: StoryMenu,        label: "Select story"           value: if story?.id then stripAnsi tracker.formatStory story
          else
            action: configure,        label: "Select story"           value: colorNotPresent("configure tracker")

          action: SelectCommitType,   label: "Select type"            value: type

          if myAccount
            action: SelectCoauthors,  label: "Change coauthors"       value: if members?.length == 0 then colorNotPresent 'only you on project' else presentValue if coauthors?.length > 0 then coauthors
          else
            action: configure,        label: "Change coauthors"       value: colorNotPresent("configure tracker")

          action: EditGitStage,       label: "Edit staged files" value:
            compactFlatten array statusCat from :staged :unstaged :untracked when status[statusCat]?.length > 0
              &colors[statusColors[statusCat]] "" #{status[statusCat].length} #{statusCat}
            .join ', '

          label: "Edit body" value: body, action: (state) ->
            openInExternalEditor body
            .then (breakingChange) -> merge state, {} body

          if projectConfig.conventionalCommit
            label: "Breaking changes"
            value: breakingChange
            action: (state) ->
              openInExternalEditor breakingChange
              .then (breakingChange) -> merge state, {} breakingChange

          if present message
            action: CommitNow
            value:  "" Commit and exit
            exit:   true

      postprocessState: saveState

  .then -> null