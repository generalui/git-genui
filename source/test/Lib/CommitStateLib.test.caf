import &StandardImport
import Git

global.beforeAll ->
  Config.load()

testEncodeAndDecodeMessage = (args...) ->
  each props, i in args by 2
    expectedMessage = args[i + 1]
    test "getCommitMessage   #{&util.inspect props}" ->
      assert.eq
        getCommitMessage props
        expectedMessage
        {} props

    test "parseCommitMessage #{&util.inspect(expectedMessage, { compact: true, breakLength: 200 }).replace /\n\s*/g, ' '}" ->
      assert.eq
        parseCommitMessage expectedMessage
        props
        {} expectedMessage

testEncodeAndDecodeMessage2 = (args...) ->
  each commitMessage in args
    test "getCommitMessage parseCommitMessage #{&util.inspect(commitMessage, { compact: true, breakLength: 200 }).replace /\n\s*/g, ' ' }" ->
      assert.eq
        getCommitMessage parseCommitMessage commitMessage
        commitMessage

describe :parseCommitMessage ->
  testEncodeAndDecodeMessage
    message: "" just some text is OK
    "" just some text is OK

    type: :aType
    message: "" a title
    "" aType: a title

    type: :patch/fix
    message: "" a title
    "" patch/fix: a title

    type: :patch/fix
    message: "" a title
    storyId: :123
    "" patch/fix: [#123] a title

    type: :patch/fix
    message: "" a title
    storyId: :123
    "" patch/fix: [#123] a title

    type: :patch/fix
    message: "" a title
    storyId: :123
    storyState: :finished
    "" patch/fix: [finished #123] a title

    type: :patch/fix
    message: "" a title
    storyId: :123
    storyState: :finished
    body:
      """
        This is some very cool body
        * with bullets

        And paragraphs

    """
      patch/fix: [finished #123] a title

      This is some very cool body
      * with bullets

      And paragraphs

    type: :patch/fix
    message: "" a title
    storyId: :123
    storyState: :finished
    coauthors: [] :frank :sally

    """
      patch/fix: [finished #123] a title


      Co-authored-by: frank
      Co-authored-by: sally

  testEncodeAndDecodeMessage2
    "" just some text is OK
    "" patch/fix: a title
    "" patch/fix: [#123] a title


describe :getCommitMessage ->

  ##
    <type>(<scope>): [(Starts|Finishes) #TRACKER_STORY_ID] <message>
    <BLANK LINE>
    <body>
    <BLANK LINE>
    <footer>
    <BLANK LINE>
    <BLANK LINE>
    Co-authored-by: name <name@example.com>
    Co-authored-by: another-name <another-name@example.com>

  exhibitA =
    type:      :feat
    story:           '[starts #171339446] Update "About Page" with collage, move Kayak photo to Careers.'
    message:         ""
    wantLongMessage: true

  test "type and message" ->
    assert.eq
      getCommitMessage
        type:     :feat
        message:  :hi
      "" feat: hi


  test "body" ->
    assert.eq
      getCommitMessage
        type:     :feat
        message:  :hi
        body:     "" OneLine\nTwoLine
      """
        feat: hi

        OneLine
        TwoLine

  test "body safety ensures no more than two newlines in a row" ->
    assert.eq
      getCommitMessage
        type: :feat
        message:    :hi
        body: "OneLine\n\n\n\nTwoLine"

      """
        feat: hi

        OneLine

        TwoLine

  test "story: id: 123" ->
    assert.eq
      getCommitMessage
        type:       :feat
        message:    :hi
        story: id: 123
      "" feat: [#123] hi

  test "story: id: 123 status: :unstarted" ->
    assert.eq
      getCommitMessage
        type:       :feat
        message:    :hi
        story: id: 123 status: :unstarted
        storyState: :started
      "" feat: [started #123] hi

  test :storyFinished ->
    assert.eq
      getCommitMessage
        type:       :feat
        message:    :hi
        story: id:  123, status: :started
        storyState: :finished
      "" feat: [finished #123] hi

  test "coauthors" ->
    assert.eq
      getCommitMessage
        type:       :feat
        message:    :hi
        coauthors:  [] :franky
      """
        feat: hi


        Co-authored-by: franky

  test :breakingChange ->
    assert.eq
      getCommitMessage
        type: :feat
        message: "" allow provided config object to extend other configs
        breakingChange: "" `extends` key in config file is now used for extending other config files

      """
        feat: allow provided config object to extend other configs

        BREAKING CHANGE: `extends` key in config file is now used for extending other config files


test 'extractSavableState' ->
  assert.eq
    merge extractSavableState message: :foo, bar: :baz
    message: :foo

describe :getCommitComment ->
  test 'has git-genui tag' ->
    expect getCommitComment {}
    .toMatch
      /// git-genui .* v \d+\. \d+\. \d+

  test "test everything" ->
    getInitialCommitState quiet: true
    .then (initialState) ->
      initialState.message = "my-commit-message"

      &ArtTestbench.assert.match
        getCommitComment state = merge initialState,
          generatedCommitMessage: getCommitMessage initialState
          commit:                 "abc123"

        ///
          #{escapeRegExp state.storyState}
          (.|\n)*#{escapeRegExp state.commit}
          (.|\n)*#{escapeRegExp state.status.current}
          (.|\n)*#{escapeRegExp state.remote.refs.fetch}
          (.|\n)* #{escapeRegExp state.generatedCommitMessage}
          (.|\n)*git-genui
          (.|\n)* v \d+\. \d+\. \d+
