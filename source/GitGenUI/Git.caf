import &StandardImport, {} &colors
SimpleGit = require(:simple-git/promise)()

class Git extends BaseClass

  @commit: (options) ->
    Promise.then -> SimpleGit.commit answersToCommit options


  @classGetter
    @email: ->
      SimpleGit.raw []
        :config
        :user.email

    @status: ->
      Promise.then -> SimpleGit.status()
      .then (o) -> object k in Object.keys o
        status = o[k]
        if k == :files
          status = array file in status
            merge
              objectWithout file, :working_dir
              index:      decodeStatus file.index
              workingDir: decodeStatus file.working_dir
        else status

  statusCodes =
    D:  :deleted
    C:  :conflicted
    R:  :renamed
    A:  :added
    M:  :modified
    ?:  :untracked
    ' ': null

  decodeStatus = (statusCode) ->
    statusCodes[statusCode]

  @printStatus: ->
    unstagedColors =
      deleted:    :red
      conflicted: :magenta
      added:      :yellow
      renamed:    :blue
      modified:   :red
      untracked:    :red
      staged:     :green

    stagedColors =
      deleted:    :brightRed
      conflicted: :brightMagenta
      added:      :brightYellow
      renamed:    :brightBlue
      modified:   :brightCyan
      untracked:    :brightGray
      staged:     :brightGreen

    @status
    .tap (status) ->
      log {} status.files
      log "Branch:\n  #{colors.green status.current}                       #{colors.grey "(tracking: #{status.tracking})"}"
      outputOne = ({path}, status, clr) ->
        colors[clr] "  #{pad status + ':', 12} #{path}"

      staged = []
      unstaged = []
      untracked = []
      each file in status.files
        if !present file.workingDir
          staged.push outputOne file, file.index, :green
        else if file.workingDir == :untracked
          untracked.push outputOne file, file.workingDir, :red
        else
          unstaged.push outputOne file, file.workingDir, :red

      if staged.length > 0
        log "" \nChanges to be committed:       #{colors.grey "(#{pluralize :file, staged.length})"}
        log staged.sort().join :\n

      if unstaged.length > 0
        log "" \nChanges not staged to commit:  #{colors.grey "(#{pluralize :file, unstaged.length})"}
        log unstaged.sort().join :\n

      if untracked.length > 0
        log "" \nUntracked files:               #{colors.grey "(#{pluralize :file, untracked.length})"}
        log untracked.sort().join :\n

