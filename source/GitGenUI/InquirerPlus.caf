import &StandardImport
&inquirer.registerPrompt :autocomplete &inquirer-autocomplete-prompt
&inquirer.registerPrompt :checkbox-plus &inquirer-checkbox-plus-prompt

class InquirerPlus
  @Inquirer: (prompts...) -> &inquirer.prompt compactFlatten prompts
  @inquire: (prompts...) -> &inquirer.prompt compactFlatten prompts

  @ask: (prompts...) =>
    p = &inquirer.prompt compactFlatten prompts
    p.thenAsk = (prompts...) ->
      p.then (a1) ->
        @inquire prompts
        .then (a2) -> deepMerge a1, a2

  @AutoCompleteQ: (options) ->
    merge
      type:     :autocomplete
      source:   autocompleteFromStrings compactFlatten options.strings
      options

  @YesNoQ: (options) ->
    merge
      type:     :expand
      default:  :no
      choices:
        key: :N value: :no  name: "" no
        key: :y value: :yes name: "" yes
      options

  @InputQ: (options) ->
    merge
      type: :input
      options

  @PasswordQ: (options) ->
    merge
      type: :password
      options


  @SelectStoryQ: (stories, options) =>
    @AutoCompleteQ merge
      name:     :story
      message:  "" Select a story...
      pageSize: 20
      strings: compactFlatten []
        stories.map formatStory
        "(none)"

      filter: (val) ->
        if val == "(none)" then null
        else if m = val.match /// ^ \[ ([^\]]+)
          id = m[1]
          find story in stories when "#{story.id}" == id

      options