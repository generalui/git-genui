import &StandardImport, &Config

baseUrl = :https://www.pivotaltracker.com/services/v5

class PivotalTracker extends BaseClass
  @classGetter commonRestOptions: ->
    normalizedHeaders: X-TrackerToken: config.trackers.pivotalTracker.token

  @getProjects: =>
    &ArtRestClient.getJson :https://www.pivotaltracker.com/services/v5/projects @commonRestOptions

  @getStories: (projectId, options) ->
    options extract? states
    states ?= :started :rejected :planned :unstarted :unscheduled
    &ArtRestClient.getJson "#{baseUrl}/projects/#{projectId}/stories?limit=500&date_format=millis&filter=state:#{states.join ','}" @commonRestOptions
    .then (stories) ->
      array {id, requested_by_id, current_state, story_type, name, updated_at, created_at, url, owner_ids} in stories
        {}
          id
          url
          name
          requestedById: requested_by_id
          ownerIds: owner_ids
          state: current_state
          updatedAt: updated_at
          createdAt: created_at

  @getMyAccount: =>
    &ArtRestClient.getJson :https://www.pivotaltracker.com/services/v5/me?date_format=millis @commonRestOptions
    .then @_processPivotalTrackerMe

  @getMembers: (projectId) =>
    &ArtRestClient.getJson "#{baseUrl}/projects/#{projectId}/memberships" @commonRestOptions
    .then (memberships) ->
      array {person} in memberships
        {id, name, email} = person

  @openInBrowser: (projectId) ->
    &open "" https://www.pivotaltracker.com/n/projects/#{projectId}

  @_processPivotalTrackerMe: (account) ->
    merge
      object v, k from account when k != :api_token && k != :kind with-key lowerCamelCase k
      tracker: :PivotalTracker

  @authenticate: ({username, password}) ->
    &ArtRestClient.getJson :https://www.pivotaltracker.com/services/v5/me merge
      verbose: true
      headers:
        Authorization: "" Basic #{} &btoa "#{username}:#{password}"
    .then @_processPivotalTrackerMe