import &StandardImport, &Config, &ArtRestClient

baseUrl = :https://www.pivotaltracker.com/services/v5

class PivotalTracker extends BaseClass
  @classGetter commonRestOptions: ->
    normalizedHeaders: X-TrackerToken: config.accounts.pivotalTracker.token

  #####################################
    READ
  #####################################
  @getProjects: =>
    getJson :https://www.pivotaltracker.com/services/v5/projects @commonRestOptions

  @getStories: (projectId, options) ->
    options extract? states
    states ?= :started :rejected :planned :unstarted :unscheduled
    getJson "#{baseUrl}/projects/#{projectId}/stories?limit=500&date_format=millis&filter=state:#{states.join ','}" @commonRestOptions
    .then (stories) -> stories.map @_normalizeStory

  @getMyAccount: =>
    getJson :https://www.pivotaltracker.com/services/v5/me?date_format=millis @commonRestOptions
    .then @_normalizeAccount

  @getMembers: (projectId) =>
    getJson "#{baseUrl}/projects/#{projectId}/memberships" @commonRestOptions
    .then (memberships) ->
      array {person} in memberships
        {id, name, email} = person

  @openInBrowser: (projectId) ->
    &open "" https://www.pivotaltracker.com/n/projects/#{projectId}

  @authenticate: ({username, password}) ->
    getJson :https://www.pivotaltracker.com/services/v5/me merge
      headers:
        Authorization: "" Basic #{} &btoa "#{username}:#{password}"
    .then @_normalizeAccount

  #####################################
    UPDATE
  #####################################
  @updateStoryState: (projectId, storyId, status) ->
    throw new Error "invalid status: #{status}" unless status == "finished" or status == "started"
    putJson
      "" #{baseUrl}/projects/#{projectId}/stories/#{storyId}
      current_state: status

  #####################################
    PRIVATE
  #####################################
  @_normalizeStory: ({id, requested_by_id, current_state, story_type, name, updated_at, created_at, url, owner_ids}) ->
    {}
      id
      url
      name
      requestedById: requested_by_id
      ownerIds: owner_ids
      state: current_state
      updatedAt: updated_at
      createdAt: created_at

  @_normalizeAccount: (account) ->
    merge
      object v, k from account with-key
        if k == :api_token
          :token
        else lowerCamelCase k
      tracker: :PivotalTracker
