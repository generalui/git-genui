import &StandardImport

yesNoOptions =
  type:     :expand
  default:  :no
  choices:
    key: :N value: :no name: "" no
    key: :y value: :yes name: "" yes

({stories, members}) ->
  &inquirer.registerPrompt :autocomplete &inquirer-autocomplete-prompt
  &inquirer.prompt []
    {}
      type:     :autocomplete
      name:     :type
      message:  "" What type of commit is this? (select lowest matching number)
      source:
        autocompleteFromStrings []
          "" FEAT:     feature added
          "" FIX:      bug fix
          "" PERF:     performance enhancement
          "" REFACTOR: code quality improved
          "" TEST:     tests added, improved or fixed
          "" DOCS:     documentation updated
          "" STYLE:    code formatting improved
          "" CHORE:    other changes (tooling, configuration, etc...)
      filter: (val) -> val.split(":")[0].toLowerCase()

    {}
      type:     :autocomplete
      name:     :trackerId
      message:  "" What story does this commit advance?
      pageSize: 20
      source: autocompleteFromStrings array {id, state, name} in stories with "" [#{id}] (#{state}) #{name}
      filter: (val) ->
        if m = val.match /// ^ \[ ([^\]]+)
          m[1]

    {}
      type:     :input
      name:     :subject
      message:  "" Enter git commit summary:
      validate: (v) -> if present(v) then true else "" Please enter a summary

    merge yesNoOptions,
      name:     :wantLongMessage
      message:  "" Do you want to add details to your git commit?

    {}
      type:     :editor
      name:     :body
      message:  "" Git commit details
      when:     ({wantLongMessage}) -> wantLongMessage == :yes
      filter:   (v) -> v?.trim()

    {}
      type:     :autocomplete
      name:     :coauthor
      message:  "" Are you pairing with someone?
      default:  null
      source: autocompleteFromStrings compactFlattenAll "(no one)" array {email, name} in members with "" #{name} <#{email}>

  .then (answers) ->
    answers.coauthor = null if answers.coauthor == "(no one)"

    require('simple-git/promise') :.
    .status()
    .then (status) -> {} answers, status = object key in Object.keys(status) with status[key]

  .then ({status, answers}) ->
    log '\nOrder receipt:'
    log {}
      status
      commit_message = answersToCommit answers

    &inquirer.prompt []
      merge yesNoOptions,
        type:     :expand
        default:  :no
        choices:
          key: :y value: true   name: "" yes
          key: :c value: false  name: "" cancel
        name:     :commit
        message:  "" 'git commit' now?
    .then ({commit}) ->
      if commit
        &Git.commit answers
        .then (results) -> log success: results
        .catch (error) -> log.error error

      else
        log " canceled..."


