import &StandardImport, {}
  &path
  fs:   &fsExtra
  glob: &globPromise

class Config extends BaseClass

  @registerLoadersFilename: :register.js
  @configBasename: :git-genui.config
  @sourceRootIndicatorFiles:
    "" .git
    "" #{@configBasename}.*

  # capture require (hack around webpack)
  realRequire = eval :require

  @config: {}

  @classGetter
    userConfigPath: -> @userHome.then (dir) -> "#{dir}/#{@configBasename}"
    repoConfigPath: -> @repoRoot.then (dir) -> "#{dir}/#{@configBasename}"
    userHome: -> @_registerLoaders().then -> &os.homedir()
    repoRoot: -> @_repoRoot ?=
      new SourceRoots @sourceRootIndicatorFiles
      .findSourceRoot process.cwd()

    userConfig:     -> @_userConfig    ?= @userHome.then @_loadOneConfig
    projectConfig:  -> @_projectConfig ?= @repoRoot.then @_loadOneConfig

    configPromise: =>
      Promise.all []
        @userConfig
        @projectConfig
      .then (results) -> deepMerge @config, results...

  @writeUserConfig: (newConfig, mergeWithExisting = true) =>
    Promise.all []
      @getUpdatedUserConfig newConfig, mergeWithExisting
      @userConfigPath
    .then ([str, userConfigPath]) ->
      &fsExtra.writeFile
        filePath = userConfigPath + ".js"
        str
      .then -> filePath

  @getUpdatedUserConfig: (newConfig, mergeWithExisting = true) =>
    if mergeWithExisting then @userConfig.then (existingConfig) -> deepMerge existingConfig, newConfig
    else Promise.resolve newConfig
    .then (configToWrite) -> "" module.exports = #{} JSON.stringify configToWrite, null, "  "

  @load: => @configPromise.then (config) -> mergeInto @config, config

  #######################################
    PRIVATE
  #######################################
  @_prepForConfigLoad: =>

  @_registerLoaders: (repoRoot = @repoRoot) =>
    @__registerLoaders ?=
      Promise.then -> repoRoot
      .then (repoRoot) ->
        if fs.existsSync file = path.join repoRoot, @registerLoadersFilename
          realRequire file

  @_loadOneConfig: (dir, name = @configBasename) =>
    baseName = path.join dir, name
    glob baseName + ".*"
    .then (results) -> realRequire baseName if results.length > 0
