{"version":3,"file":"","sourceRoot":"","sources":["./source/GitGenUI/Config.caf"],"sourceContent":["import &StandardImport, {}\n  &path\n  fs:   &fsExtra\n  glob: &globPromise\n\nclass Config extends BaseClass\n\n  @registerLoadersFilename: :register.js\n  @configBasename: :git-genui.config\n  @sourceRootIndicatorFiles:\n    \"\" .git\n    \"\" #{@configBasename}.*\n\n  # capture require (hack around webpack)\n  realRequire = eval :require\n\n  @config: {}\n\n  @classGetter\n    userConfigPath: -> @userHome.then (dir) -> \"#{dir}/#{@configBasename}\"\n    repoConfigPath: -> @repoRoot.then (dir) -> \"#{dir}/#{@configBasename}\"\n    userHome: -> @_registerLoaders().then -> &os.homedir()\n    repoRoot: -> @_repoRoot ?=\n      @_registerLoaders().then ->\n        new SourceRoots @sourceRootIndicatorFiles\n        .findSourceRoot process.cwd()\n\n    userConfig:     -> @_userConfig    ?= @userHome.then @_loadOneConfig\n    projectConfig:  -> @_projectConfig ?= @repoRoot.then @_loadOneConfig\n\n    configPromise: =>\n      Promise.all []\n        @userConfig\n        @projectConfig\n      .then (results) -> deepMerge @config, results...\n\n  @writeUserConfig: (newConfig, mergeWithExisting = true) =>\n    Promise.all []\n      @getUpdatedUserConfig newConfig, mergeWithExisting\n      @userConfigPath\n    .then (str, userConfigPath) ->\n      &fsExtra.writeFile filePath = userConfigPath + \".js\", str\n      .then -> filePath\n\n  @getUpdatedUserConfig: (newConfig, mergeWithExisting = true) =>\n    if mergeWithExisting then @userConfig.then (existingConfig) -> deepMerge existingConfig, newConfig\n    else Promise.resolve newConfig\n    .then (configToWrite) -> \"\" module.export = #{} JSON.stringify configToWrite, null, \"  \"\n\n  @load: => @configPromise.then (config) -> mergeInto @config, config\n\n  #######################################\n    PRIVATE\n  #######################################\n  @_prepForConfigLoad: =>\n\n  @_registerLoaders: (repoRoot = @repoRoot) =>\n    @__registerLoaders ?=\n      Promise.then -> repoRoot\n      .then (repoRoot) ->\n        if fs.existsSync file = path.join repoRoot, @registerLoadersFilename\n          realRequire file\n\n  @_loadOneConfig: (dir, name = @configBasename) =>\n    baseName = path.join dir, name\n    glob baseName + \".*\"\n    .then (results) -> realRequire baseName if results.length > 0\n"],"names":[],"mappings":"AAAA;;uKAAO,8BACL,uBACA,IAAM,qBACN,MAAM,kIAER,kDAAqB,2GAEO,qCACT,qDAEb,wBACG,2BAGP,cAAc,KAAK,8BAInB,iBAAY,CACV,4BAAmB,0BAAe,CAAC,wBAAW,qBAAO,2BACrD,4BAAmB,0BAAe,CAAC,wBAAW,qBAAO,2BACrD,sBAAa,oCAAwB,MAAI,4BACzC,gCAAa,iDAAU,AAAV,iBACX,6BAAwB,MACtB,KAAI,YAAY,+CACA,oBAEpB,kCAAmB,mDAAY,AAAZ,mBAAmB,mBAAe,yBACrD,qCAAmB,sDAAe,AAAf,sBAAmB,mBAAe,yBAErD,qBACE,aACE,iBACA,0BACG,AAAC,CAAC,YAAY,UAAU,aAAS,uCAE1C,AAAkB,CAAC,WAAW,oBAAoB,SAChD,aACE,0BAAsB,WAAW,oBACjC,2BACG,AAAC,CAAC,KAAK,kCAAkB,OAC5B,8BAAmB,YAAW,iBAAiB,OAAO,iBAC7C,0CAEb,AAAuB,CAAC,WAAW,oBAAoB,SACrD,CAAG,oBAAuB,qBAAgB,AAAC,CAAC,mBAAmB,UAAU,gBAAgB,cACpF,gBAAgB,iBAChB,AAAC,CAAC,kBAAkB,gCAAuB,eAAe,eAAe,MAAM,uBAEtF,MAAU,wBAAmB,AAAC,CAAC,WAAW,UAAU,aAAS,sEAO7D,AAAmB,CAAC,WAAW,6BAAa,gBAC1C,yCAAkB,AAAlB,yBACE,mBAAgB,eACX,AAAC,CAAC,wBAAY,OACjB,AAAG,cAAc,OAAO,UAAU,UAAU,iCAAwB,AAClE,YAAY,+CAEpB,AAAiB,CAAC,KAAK,OAAO,uCAAmB,AAC/C,WAAW,UAAU,KAAK,cAC1B,KAAK,WAAW,WACX,AAAC,CAAC,YAAY,AAAwB,kBAAiB,KAAzC,YAAY"}