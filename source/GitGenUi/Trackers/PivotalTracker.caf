import &ArtStandardLib, &ArtClassSystem, &ArtRestClient, &UserConfig

baseUrl = :https://www.pivotaltracker.com/services/v5

class PivotalTracker extends BaseClass
  @classGetter commonRestOptions: ->
    normalizedHeaders: X-TrackerToken: userConfig.accounts.pivotalTracker.token

  #####################################
    READ
  #####################################
  @classGetter
    projects: ->
      getJson :https://www.pivotaltracker.com/services/v5/projects @commonRestOptions

    myAccount: ->
      getJson :https://www.pivotaltracker.com/services/v5/me?date_format=millis @commonRestOptions
      .then @_normalizeAccount

  #####################################
    READ PROJECT DETAILS
  #####################################
  stateOrder =
    rejected:       0
    started:        1
    unstarted:      2
    unscheduled:    3
    finished:       4
    delivered:      5
    unknown:        5

  @storyStates: :started :rejected :planned :unstarted :unscheduled :finished :delivered

  @settableStoryStates: :unstarted :started :finished

  @getStories: (projectId, options) =>
    options extract? states
    states ?= @storyStates
    getJson "#{baseUrl}/projects/#{projectId}/stories?limit=500&date_format=millis&filter=state:#{states.join ','}" @commonRestOptions
    .then (stories) -> stories.map @_normalizeStory
    .then (stories) -> stories.sort (a, b) ->
        aStatus = stateOrder[a.state] ? stateOrder.unknown
        bStatus = stateOrder[b.state] ? stateOrder.unknown
        if aStatus != bStatus then aStatus - bStatus
        else b.updatedAt - a.updatedAt


  @getMembers: (projectId) =>
    getJson "#{baseUrl}/projects/#{projectId}/memberships" @commonRestOptions
    .then (memberships) ->
      array {person} in memberships
        {id, name, email} = person

  @openInBrowser: (projectId) ->
    &open @getProjectUrl projectId

  @getProjectUrl: (projectId) -> "" https://www.pivotaltracker.com/n/projects/#{projectId}

  @getStoryUrl: (projectId, storyId) ->
    @getProjectUrl projectId
    + "" /stories/#{storyId}

  @authenticate: ({username, password}) ->
    getJson :https://www.pivotaltracker.com/services/v5/me merge
      headers:
        Authorization: "" Basic #{} &btoa "#{username}:#{password}"
    .then @_normalizeAccount

  #####################################
    TOOLS
  #####################################

  @storyIsStartable: (story) ->
    story.state == :unstarted
    || story.state == :rejected
    || story.state == :unscheduled

  #####################################
    UPDATE
  #####################################
  @updateStory: (projectId, storyId, updates) ->
    {state, estimate} = updates
    if state
      throw new Error "invalid state: #{state}" unless state == "finished" or state == "started"

    putJson
      "" #{baseUrl}/projects/#{projectId}/stories/#{storyId}

      merge {}
        estimate
        current_state: state

      @commonRestOptions

  @createComment: (projectId, storyId, text) ->
    postJson
      "" #{baseUrl}/projects/#{projectId}/stories/#{storyId}/comments
      {} text
      @commonRestOptions

  #####################################
    PRIVATE
  #####################################
  @_normalizeStory: (story) ->
    story extract
      id, requested_by_id, current_state, story_type, name, updated_at, created_at, url, owner_ids
      estimate
    {}
      id
      url
      name
      estimate
      requestedById: requested_by_id
      ownerIds: owner_ids
      state: current_state
      updatedAt: updated_at
      createdAt: created_at

  @_normalizeAccount: (account) ->
    merge
      object v, k from account with-key
        if k == :api_token
          :token
        else lowerCamelCase k
      tracker: :PivotalTracker
