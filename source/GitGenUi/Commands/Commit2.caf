import &StandardImport, &UserConfig, &CommitLib

colorizeValue = &colors.yellow
colorNotPresent = &colors.grey

presentValue = (value, noneValue = :none) ->
  if present value
    if (value is Array) and value[0] is String
      array v in value
        colorizeValue v
      .join ', '

    else if value is String
      colorizeValue value

    else
      formattedInspect value, color: true
  else
    colorNotPresent noneValue

noop = (a) -> a

##
  IN: state:
    status:     git status
    stories:    tracker stories
    members:    tracker members
    myAccount:  current user's tracker account

ActionMenu = (state) ->
  state extract
    status
    stories
    members
    myAccount

    message
    type
    story
    pairs

  otherMembers = array member in members when member.id != myAccount.id
  {staged, unstaged, untracked} = nStatus = normalizeGitStatus status
  statusColors =
    staged: :green
    unstaged: :red
    untracked: :red
  statusSummary =
    compactFlatten array statusCat from :staged :unstaged :untracked when nStatus[statusCat]?.length > 0
      &colors[statusColors[statusCat]] "" #{nStatus[statusCat].length} #{statusCat}
    .join ', '

  &PromptFor.selectList
    prompt:  "" Select action:
    items: compactFlatten []
      action: EditGitStage,      value: "" 1. Edit staged files:      #{} statusSummary
      action: StoryMenu,         value: "" 2. Select story:           #{} if !myAccount then colorNotPresent("configure tracker") else presentValue(if story then tracker.formatStory story)
      action: SelectCommitType,  value: "" 3. Select type:            #{} presentValue type
      action: EditCommitMessage, value: "" 4. Edit message:           #{} presentValue message
      action: SelectPairs,       value: "" 5. Change selected pairs:  #{} if !myAccount then colorNotPresent("configure tracker") else if otherMembers.length == 0 then colorNotPresent("only you") else presentValue pairs

      # key: :autoPush    value: "" auto-push on/off
      # key: :storyStatus value: "" update story status: started -> finished / (no change: finished)
      key: :commitNow   value: "" 6. Commit now
      key: :abort       value: "" 0. Abort / quit

  .then ({action}) ->
    if action?
      Promise.then -> action state
      .then (newState) ->
        {message, type, story, pairs} = newState
        userConfig.saveCommitOptionsForProject {}
          message, type, pairs
          storyId:  story?.id
        ActionMenu newState if newState


description: "" interactive commit2
run: (options) ->
  Promise.deepAll merge
    userConfig.commitOptionsForProject
    {message, pairs, type, storyId} = options
    {}
      &Git.status
      tracker.stories
      tracker.members
      tracker.myAccount

  .then (loadedOptions) ->
    loadedOptions extract storyId, story, stories
    if storyId || story
      storyId ?= story?.id
      unless story = find story in stories when story.id == storyId
        log.warn merge {}
          message: "" Invalid story or storyId
          story
          storyId

      loadedOptions.story = story

    ActionMenu loadedOptions

