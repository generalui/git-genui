import &StandardImport, &UserConfig

{}
  updateStateWithPrompt = (statePropName, promptF) ->
    (state) ->
      Promise.then -> promptF state
      .then (value) ->
        if value == undefined then state[statePropName]
        else value
      .then (value) -> merge state, [statePropName]: value

  saveState = (state) ->
    userConfig.saveCommitOptionsForProject {message, type, coauthors, story} = state if state
    state

  validateStory = (state) ->
    state extract story, storyId, stories
    if storyId ?= story?.id
      unless story = find story in stories when story.id == storyId
        log.warn merge {}
          message: "" Invalid story or storyId
          story
          storyId

      state.story = story

    state

  colorizeValue = &colors.yellow
  colorNotPresent = &colors.grey

  presentValue = (value, noneValue = :none) ->
    if present value
      if (value is Array) and value[0] is String
        array v in value
          colorizeValue v
        .join ', '

      else if value is String
        colorizeValue value

      else
        formattedInspect value, color: true
    else
      colorNotPresent noneValue

  validateType = (state) ->
    unless !present(state.type) || /^(patch|major|minor)\/\w+$/.test state.type
      log.warn "" Commit type should be of the form: [major, minor or patch]/short-word (you provided: #{state.type})
      merge state, type: null
    else state

