import &StandardImport, &UserConfig, &ProjectConfig, &CommandMenuLib, &Lib, {} &colors

getProjects = ->
  tracker.projects
  .then (projects) -> object v from projects with-key v.id

selectProject = updateStateWithPrompt :projectId, ({projectId, projects}) ->
  &PromptFor.selectList
    prompt:  "" Select project:
    items: array {id, name, account_id} in projects
      projectId: id
      default: id == projectId
      value: "" #{presentValue name} #{colors.grey "(id: #{id}, account-id: #{account_id})"}
  .then ({projectId}) -> projectId
  .tap (projectId) -> projectConfig.deepMergeInto project: tracker: {} projectId, &Tracker.tracker.name

editGitEmail = updateStateWithPrompt :email ({email, trackerEmail}) ->
  &PromptFor.input
    message: "" Enter your git email:
    default: email ? trackerEmail
  .tap (email) ->
    userConfig.deepMergeInto accounts: git: {} email


editTrackerToken = (state) ->
  state extract trackerName
  eTT = ->
    &PromptFor.password
      message: "" Enter your #{trackerName} token:
    .tap (token) -> userConfig.deepMergeInto accounts: [trackerName]: {} token
    .tap -> .tap (projectId) -> projectConfig.deepMergeInto project: tracker: name: trackerName
    .then (token) ->
      tracker.myAccount
      .then
        ->
          log colors.green "" Valid token.
          token
        (error) ->
          log error
          log.warn "" Invalid token.
          eTT()
  eTT()
  .then (token) -> Promise.deepAll {}
    token
    tracker.myAccount
    projects: getProjects()
  .then ({token, myAccount, projects}) -> merge state, {} token, projects, trackerEmail: myAccount.email

getTrackerToken = (state) ->
  state extract email, trackerName, trackerEmail

  &Auth {}
    email: trackerEmail ? email ? getEnv().USER
    trackerName

  .tap ({token, email}) -> userConfig.deepMergeInto accounts: [trackerName]: {} token, email
  .then ({token, email}) ->
    getProjects()
    .then (projects) ->
      merge
        trackerEmail: email
        state
        {} token, projects
  .catch ->
    log.warn "" Auth failed.
    state

(options)->
  options extract? exitPrompt, prompt
  getProjects()
  .catch -> log.warn "" Tracker token is invalid.
  .then (projects) ->
    menuApp
      {}
        projects
        &Tracker.tracker.projectId
        trackerName = &Tracker.tracker.name
        trackerAccount = userConfig.accounts?[trackerName]
        trackerAccount?.token
        trackerEmail: trackerAccount?.email

        userConfig.accounts?.git?.email

      ({projects, email, token, projectId}) ->

        &Tracker.tracker.myAccount
        .then
          (me) ->
            log colors.green prompt if present prompt
            me
          ->
            log.warn "" Please configure your #{trackerName} token.
            null

        .then (me) -> &PromptFor.selectList
          prompt:  "" Select action:
          items: compactFlatten []
            action: getTrackerToken,  value: "" 1. get PivotalTracker token via auth  #{} presentValue me?.name
            action: editTrackerToken, value: "" 2. set PivotalTracker token manually  #{} presentValue repeat 'x', token?.length ? 0
            # action: editGitEmail,     value: "" 3. set your git email                 #{} presentValue email
            if me?
              action: selectProject,    value: "" 3. select tracker project             #{} presentValue projects[projectId]?.name
            else
              action: (state) -> state
              value: colors.grey "" 3. select tracker project             configure token first

            value: "" 0. #{} exitPrompt ? :exit


