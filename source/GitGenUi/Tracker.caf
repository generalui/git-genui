import &ArtStandardLib, &ArtClassSystem, &colors, &ProjectConfig

class Tracker extends BaseClass
  @singletonClass()

  constructor: (_projectConfig = projectConfig) ->
    @_projectConfig = _projectConfig
    @init()

  init: ->
    @formatStory = @formatStory.bind @

  @getter
    :projectConfig
    tracker:              -> &Trackers[@name]
    projectId:            -> @projectConfig?.project?.tracker?.projectId
    name:                 -> @projectConfig?.project?.tracker?.name ? :PivotalTracker
    settableStoryStates:  -> @tracker?.settableStoryStates
    stories:              -> @tracker?.getStories log @projectId
    members:              -> @tracker?.getMembers @projectId
    myAccount:            -> @tracker?.getMyAccount @projectId
    projects:             -> @tracker?.projects

  getStoryUrl:       (storyId) -> @tracker?.getStoryUrl @projectId, storyId
  getProjectUrl:     -> @tracker?.getProjectUrl @projectId
  openInBrowser:     -> @tracker?.openInBrowser @projectId

  updateStory:       (storyId, updates) -> @tracker?.updateStory @projectId, storyId, updates
  createComment:     (storyId, text) -> @tracker?.createComment @projectId, storyId, text

  authenticate:      (options) -> @tracker?.authenticate options

  storyIsStartable: (story) -> @tracker?.storyIsStartable story

  formatStory: (story, addLinks) ->
    if story.id
      "" #{blue "[##{story.id}]"} #{grey "(#{story.state})"} #{story.name}
      # "" [##{story.id}] (#{story.state}) #{story.name}
    else
      "(none)"

  createCommentWithMessage:     (storyId, text) ->
    @createComment storyId, text
    .tap ->
      @logStoryUpdateMessage storyId,
        """
          comment added:
          #{dashes = '-'.repeat process.stdout.columns - 1}
            #{text.replace /\n/g, "\n  "}
          #{dashes}

  updateStoryWithMessage: (storyId, updates) ->
    @updateStory storyId, updates
    .tap ->
      @logStoryUpdateMessage storyId,
        if present updates.state
          "'#{updates.state}'"
        else :updated
        + " at #{formatDate "h:MMtt (Z mmmm d, yyyy)"}"

  logStoryUpdateMessage: (storyId, message) ->
    log
      blue "Story [##{storyId}]: "
      + green message