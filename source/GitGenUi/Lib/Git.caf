import &StandardImport
{}
  normalizeGitStatus = (status) ->
    return status unless status.files # already normalized
    staged = []
    unstaged = []
    untracked = []

    each file in status.files
      if file.index && file.index != :untracked
        staged.push    merge file, status: file.workingDir || file.index

      if file.workingDir
        if file.workingDir == :untracked then    untracked.push merge file, status: file.workingDir
        else                                     unstaged.push  merge file, status: file.workingDir

    {}
      staged, unstaged, untracked
      status.current, status.traking
      status.ahead, status.behind

  nothingStaged = (status) ->
    status.staged.length == 0 && status.renamed.length == 0 && status.created.length == 0 && status.deleted.length == 0

  answersToCommit = ({type, scope, story, subject, body, footer, coauthor, storyFinished}) ->
    throw new Error "missing subject" unless present subject
    throw new Error "missing type" unless present type
    compactFlattenAll
      type
      if scope then "" (#{scope})
      ": "
      if story
        statusString = switch
        when storyFinished then " (finished)"
        when story.status == "unstarted" then " (started)"
        "[##{story.id}]#{statusString} "
      subject
      if body then "\n\n#{body.replace(/\n[\n\s]*/g, "\n")}"
      if coauthor then "\n\n\nCoauthored-by: #{coauthor}"
    .join ''

  getGitCommitMessage = ({type, story, message, coauthors, storyStatus}) ->
    compactFlattenAll
      type ? "(type)"
      ": "
      if story
        "" [##{story.id}]#{if storyStatus && storyStatus != story.status then " (#{storyStatus})"}\_

      message ? "(message)"
      if coauthors
        "\n\n\n" + array coauthor in coauthors
          "" Coauthored-by: #{coauthor}"
          .join "\n"
    .join ''
