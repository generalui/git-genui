import &StandardImport, {} &path

class Config extends BaseClass

  @registerLoadersFilename: :register.js
  @configBasename: :git-genui.config
  @sourceRootIndicatorFiles:
    "" .git
    "" #{@configBasename}.*

  # capture require (hack around webpack)
  realRequire = eval :require

  @config: {}

  @classGetter
    repoConfigPath: -> @repoRoot.then (dir) -> "#{dir}/#{@configBasename}"
    repoRoot: -> @_repoRoot ?=
      new SourceRoots @sourceRootIndicatorFiles
      .findSourceRoot process.cwd()

    projectConfig:  -> @_projectConfig ?= @repoRoot.then @_loadOneConfig

    configPromise: =>
      Promise.all []
        @userConfig
        @projectConfig
      .then (results) -> deepMerge @config, results...

  @load: => @configPromise.then (config) -> mergeInto @config, config

  #######################################
    PRIVATE
  #######################################

  @_loadOneConfig: (dir, name = @configBasename) =>
    Promise.then ->
      if &fsExtra.existsSync baseName = path.join dir, name + ".json"
        realRequire baseName
