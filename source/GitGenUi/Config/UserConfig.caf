import &StandardImport, {} &ProjectFiles, &path, &os

class UserConfig extends &ConfigShared
  @singletonClass()

  @getProjectKey: getProjectKey = ({origin, remotes, projectFolder}) ->
    origin ? remotes?[0]?.refs?.fetch ? projectFolder

  @getter
    configBasename: -> :git-genui.user.config.json
    configPath:     -> os.homedir()
    commitOptionsForProject: (projectKey = @projectKey) ->
      @commitOptions[projectKey]

  @property :projectKey

  @configFields
    accounts: {}
    commitOptions: {}

  # git can be passed in as a mock, or it will be loaded dynamically
  # NOTE: we have to load git here to break cyclic dependencies
  init: (git)->
    git ?= &git
    super
    .then -> Promise.deepAll {} git.origin, git.remotes, ProjectFiles.projectFolder
    .catch (error) -> {}
    .then getProjectKey
    .then (@projectKey) ->

  saveCommitOptionsForProject: (commitOptions, projectKey = @projectKey) ->
    throw new Error "projectKey required to save default options" unless present projectKey
    @setConfigProperty
      :commitOptions
      merge @commitOptions,
        [projectKey]: merge
          commitOptions
          {}
            updatedAt = toSeconds()
            createdAt: @commitOptions[projectKey]?.createdAt ? updatedAt
